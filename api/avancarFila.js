// api/avancarFila.js (Fun√ß√£o HTTP para Vercel)
// Rota: SEU_DOMINIO/api/avancarFila

const admin = require('firebase-admin');
const axios = require('axios');
const moment = require('moment-timezone'); // Inclu√≠do por boa pr√°tica, mas n√£o estritamente necess√°rio para esta fun√ß√£o

// Inicializa o Admin SDK APENAS se n√£o estiver inicializado (para evitar erros em ambientes serverless)
// Esta fun√ß√£o l√™ a vari√°vel FIREBASE_SERVICE_ACCOUNT do Vercel
if (!admin.apps.length) {
    // ‚ö†Ô∏è ATEN√á√ÉO: √â VITAL QUE O CONTE√öDO DO JSON ESTEJA CORRETAMENTE FORMATADO NO VERCEL
    try {
        const serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT);
        admin.initializeApp({
            credential: admin.credential.cert(serviceAccount)
        });
    } catch (e) {
        console.error("Erro ao inicializar Firebase Admin SDK:", e);
        // Em caso de erro de parsing, a fun√ß√£o n√£o deve prosseguir
        // Pode ser √∫til para debugging no Vercel logs
    }
}

const db = admin.firestore();

// Fun√ß√µes de envio (Substitua a l√≥gica do axios pela do seu provedor de WhatsApp!)
async function enviarAlertaWhatsApp(numero, mensagem) {
    const url = process.env.WHATSAPP_API_URL;
    const token = process.env.WHATSAPP_AUTH_TOKEN;
    
    // ESTE √â O C√ìDIGO DO PLACEHOLDER - SUBSTITUA PELO C√ìDIGO REAL DO SEU PROVEDOR DE WHATSAPP
    try {
        // Exemplo: Simula√ß√£o de uma chamada de API (Substitua por axios.post ou fetch real)
        await axios.post(url, {
            token: token,
            to: numero,
            body: mensagem 
        }, {
            headers: {
                'Authorization': `Bearer ${token}`, // Ou o cabe√ßalho exigido
                'Content-Type': 'application/json'
            }
        });
        console.log(`Alerta WhatsApp enviado para ${numero}`);
        return true;
    } catch (error) {
        console.error("Erro ao enviar WhatsApp:", error.response ? error.response.data : error.message);
        return false;
    }
}

// Handler da requisi√ß√£o HTTP (endpoint principal)
module.exports = async (req, res) => {
    // Apenas requisi√ß√µes POST s√£o aceitas para avan√ßar a fila
    if (req.method !== 'POST') {
        return res.status(405).send('M√©todo n√£o permitido. Use POST.');
    }

    // O Barbeiro envia a nova senha em atendimento no corpo da requisi√ß√£o POST (via App)
    const { novaSenhaEmAtendimento } = req.body; 

    if (!novaSenhaEmAtendimento || typeof novaSenhaEmAtendimento !== 'number') {
        return res.status(400).send('Campo novaSenhaEmAtendimento (number) √© obrigat√≥rio.');
    }

    try {
        // A√ß√£o 1: Atualiza a senha no Firestore (Gatilho visual para o App do Cliente)
        await db.collection('status_operacional').doc('fila_atual').update({
            senha_em_atendimento: novaSenhaEmAtendimento,
            timestamp_ultima_atualizacao: admin.firestore.FieldValue.serverTimestamp() // Para rastreio
        });

        // A√ß√£o 2: Busca os clientes na fila para notificar
        const clientesNaFilaSnapshot = await db.collection('clientes_na_fila_hoje')
            .where('status', 'in', ['espera', 'alertado'])
            .orderBy('timestamp_entrada', 'asc') // Ordem de chegada
            .limit(5) // Limite de notifica√ß√µes para economia
            .get();
            
        const promisesEnvio = [];
        let contadorPosicao = 1;

        for (const doc of clientesNaFilaSnapshot.docs) {
            const dadosCliente = doc.data();
            const whatsappCliente = dadosCliente.whatsapp;

            // Condi√ß√£o: O n√∫mero da senha do cliente deve ser maior que o que est√° sendo chamado agora.
            if (dadosCliente.numero_senha > novaSenhaEmAtendimento) {
                let mensagemAlerta;

                if (contadorPosicao === 1) {
                    // PRIMEIRO DA FILA (O PR√ìXIMO): Alerta Forte
                    mensagemAlerta = `‚úÇÔ∏è √â QUASE A SUA VEZ! ‚úÇÔ∏è\n\nA senha *${novaSenhaEmAtendimento}* est√° em atendimento. Voc√™ √© o *PR√ìXIMO*! Por favor, retorne √† barbearia agora.`;
                    // Marca como 'alertado'
                    promisesEnvio.push(doc.ref.update({ status: 'alertado' }));
                } else if (contadorPosicao <= 3) {
                    // PR√ìXIMOS (Atualiza√ß√£o de posi√ß√£o)
                    mensagemAlerta = `üíà ATUALIZA√á√ÉO DA FILA üíà\n\nA fila avan√ßou! Voc√™ est√° em *${contadorPosicao}¬∫* lugar na fila.`;
                } else {
                    break; // Para de notificar clientes muito distantes
                }

                promisesEnvio.push(enviarAlertaWhatsApp(whatsappCliente, mensagemAlerta));
            }
            contadorPosicao++;
        }

        await Promise.all(promisesEnvio);
        return res.status(200).json({ 
            success: true, 
            message: `Fila atualizada para ${novaSenhaEmAtendimento}. Alertas de WhatsApp disparados.` 
        });

    } catch (error) {
        console.error("Erro CR√çTICO no avan√ßo da fila:", error);
        return res.status(500).send('Erro interno ao processar a fila. Verifique os logs do Vercel.');
    }
};
